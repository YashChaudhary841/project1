import React from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import apiClient from '../lib/axios';
import { useForm } from 'react-hook-form';
import { zodResolver } from '../../hookform/resolvers/zod';
import * as z from 'zod';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../../components/ui/table";
import { Button } from '../../components/ui/button';
import { Input } from '../../components/ui/input';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "../../components/ui/form";
import { useToast } from "../../components/ui/use-toast";

const itemSchema = z.object({
    name: z.string().min(3, "Name must be at least 3 characters."),
    description: z.string().min(10, "Description must be at least 10 characters."),
    cost: z.coerce.number().min(0, "Cost cannot be negative."),
});

const fetchStoreItems = async () => {
    const { data } = await apiClient.get('/store');
    return data.data;
};

const createStoreItem = async (itemData) => {
    const { data } = await apiClient.post('/store', itemData);
    return data.data;
};

function StoreManagement() {
    const queryClient = useQueryClient();
    const { toast } = useToast();
    const { data: items, isLoading } = useQuery({ queryKey: ['storeItems'], queryFn: fetchStoreItems });

    const form = useForm({
        resolver: zodResolver(itemSchema),
        defaultValues: { name: '', description: '', cost: 0 },
    });

    const mutation = useMutation({
        mutationFn: createStoreItem,
        onSuccess: () => {
            queryClient.invalidateQueries(['storeItems']);
            toast({ title: "Success", description: "New store item created!" });
            form.reset();
        },
        onError: (error) => {
            toast({ title: "Error", description: error.response?.data?.message || "Failed to create item." });
        }
    });

    const onSubmit = (values) => {
        mutation.mutate(values);
    };

    return (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="md:col-span-2">
                <h3 className="text-lg font-semibold mb-4">Existing Items</h3>
                {isLoading ? <div>Loading items...</div> : (
                    <Table>
                        <TableHeader><TableRow><TableHead>Icon</TableHead><TableHead>Name</TableHead><TableHead>Cost</TableHead></TableRow></TableHeader>
                        <TableBody>
                            {items.map(item => (
                                <TableRow key={item._id}>
                                    <TableCell><img src={item.icon} alt={item.name} className="w-10 h-10 object-contain" /></TableCell>
                                    <TableCell>{item.name}</TableCell>
                                    <TableCell>{item.cost}</TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                )}
            </div>
            <div>
                <h3 className="text-lg font-semibold mb-4">Create New Item</h3>
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                        <FormField control={form.control} name="name" render={({ field }) => (
                            <FormItem><FormLabel>Item Name</FormLabel><FormControl><Input placeholder="e.g., Cool Sunglasses" {...field} /></FormControl><FormMessage /></FormItem>
                        )} />
                        <FormField control={form.control} name="description" render={({ field }) => (
                            <FormItem><FormLabel>Description</FormLabel><FormControl><Input placeholder="A stylish accessory for your plant." {...field} /></FormControl><FormMessage /></FormItem>
                        )} />
                        <FormField control={form.control} name="cost" render={({ field }) => (
                            <FormItem><FormLabel>Cost (Points)</FormLabel><FormControl><Input type="number" {...field} /></FormControl><FormMessage /></FormItem>
                        )} />
                        <Button type="submit" disabled={mutation.isLoading}>
                            {mutation.isLoading ? "Creating..." : "Create Item"}
                        </Button>
                    </form>
                </Form>
                 <p className="text-xs text-gray-500 mt-4">Note: The item icon will be automatically generated by AI (DALL-E).</p>
            </div>
        </div>
    );
}

export default StoreManagement;